// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                String             @id @default(cuid())
  name              String?
  phone             String             @unique
  email             String?            @unique
  photo             String?            @db.LongText
  password          String
  socket            String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  chatsFrom         chat[]             @relation("FromUser")
  chatsTo           chat[]             @relation("ToUser")
  createdGroups     groupChat[]        @relation("CreatedGroups")
  groupChats        groupChat[]        @relation("GroupMembers")
  groupChatMessages groupChatMessage[] @relation("sentToGroup")
  blockedUsers      blockedUser[]      @relation("Blocker")
  blockedBy         blockedUser[]      @relation("Blocked")
}

model post {
  id               String             @id @default(cuid())
  title            String?
  content          String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  chat             chat[]
  groupChatMessage groupChatMessage[]
}

model chat {
  id         String   @id @default(cuid())
  from       user     @relation("FromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId String
  to         user     @relation("ToUser", fields: [toUserId], references: [id], onDelete: Cascade)
  toUserId   String
  msg        String
  post       post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model blockedUser {
  id            String   @id @default(cuid())
  userId        String
  blockedUserId String
  user          user     @relation("Blocker", fields: [userId], references: [id])
  blockedUser   user     @relation("Blocked", fields: [blockedUserId], references: [id])
  createdAt     DateTime @default(now())

  @@unique([userId, blockedUserId])
}

model groupChat {
  id                String             @id @default(cuid())
  name              String
  image             String?
  description       String?
  isPublic          Boolean            @default(false)
  members           user[]             @relation("GroupMembers")
  createdBy         user               @relation("CreatedGroups", fields: [createdById], references: [id], onDelete: Cascade)
  createdById       String
  groupChatMessages groupChatMessage[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model groupChatMessage {
  id          String    @id @default(cuid())
  groupChat   groupChat @relation(fields: [groupChatId], references: [id], onDelete: Cascade)
  groupChatId String
  sender      user      @relation("sentToGroup", fields: [senderId], references: [id], onDelete: Cascade)
  senderId    String
  msg         String
  post        post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
